{
	"": {
  "prefix": "dbg",
  "body": [
    "//---- VG_Debugger ---- //",
    "#ifndef ONLINE_JUDGE",
    "#define debarr(a,n) cerr<<#a<<\" : \";for(int i=0;i<n;i++) cerr<<a[i]<<\" \"; cerr<<endl;",
    "#define debmat(mat,row,col) cerr<<#mat<<\" :\\n\";for(int i=0;i<row;i++) {for(int j=0;j<col;j++) cerr<<mat[i][j]<<\" \";cerr<<endl;}",
    "#define debvmat(vec) cerr << #vec << \" :\\n\"; for (auto r: vec) { for (auto c: r) cerr << c << \" \"; cerr << endl; }  // Mine added.",
    "#define pr(...) dbs(#__VA_ARGS__, __VA_ARGS__)",
    "template <class S, class T>ostream& operator <<(ostream& os, const pair<S, T>& p) {return os << \"(\" << p.first << \", \" << p.second << \")\";}",
    "template <class T>ostream& operator <<(ostream& os, const vector<T>& p) {os << \"[ \"; for (auto& it : p) os << it << \" \"; return os << \"]\";}",
    "template <class T>ostream& operator <<(ostream& os, const unordered_set<T>& p) {os << \"[ \"; for (auto& it : p) os << it << \" \"; return os << \"]\";}",
    "template <class S, class T>ostream& operator <<(ostream& os, const unordered_map<S, T>& p) {os << \"[ \"; for (auto& it : p) os << it << \" \"; return os << \"]\";}",
    "template <class T>ostream& operator <<(ostream& os, const set<T>& p) {os << \"[ \"; for (auto& it : p) os << it << \" \"; return os << \"]\";}",
    "template <class T>ostream& operator <<(ostream& os, const multiset<T>& p) {os << \"[ \"; for (auto& it : p) os << it << \" \"; return os << \"]\";}",
    "template <class S, class T>ostream& operator <<(ostream& os, const map<S, T>& p) {os << \"[ \"; for (auto& it : p) os << it << \" \"; return os << \"]\";}",
    "template <class T> void dbs(string str, T t) {cerr << str << \" : \" << t << \"\\n\";}",
    "template <class T, class... S> void dbs(string str, T t, S... s) {int idx = str.find(','); cerr << str.substr(0, idx) << \" : \" << t << \",\"; dbs(str.substr(idx + 1), s...);}",
    "template <class T> void prc(T a, T b) {cerr << \"[\"; for (T i = a; i != b; ++i) {if (i != a) cerr << \", \"; cerr << *i;} cerr << \"]\\n\";}",
    "//--------Mine Added (Inspiration: VG)--------- //",
    "template <class T>ostream& operator <<(ostream& os, queue<T> p){ os << \"[ \"; while(!p.empty()) { os << p.front() << \" \"; p.pop(); } return os << \"]\"; }",
    "template <class T>ostream& operator <<(ostream &os, stack<T> p){ vector<T> v; while (!p.empty()) { v.push_back(p.top()); p.pop(); } reverse(all(v)); os << v; return os; }",
    "template <class T>ostream& operator <<(ostream &os, priority_queue<T> p){ os << \"[ \"; while (!p.empty()) { os << p.top() << \" \"; p.pop(); } return os << \"]\"; }",
    "template <class T>ostream& operator <<(ostream &os, priority_queue<T,vector<T>, greater<T>> p){ os << \"[ \"; while (!p.empty()) { os << p.top() << \" \"; p.pop(); } return os << \"]\"; }",
    "template <class T>ostream& operator <<(ostream& os, const deque<T> &p){os << \"[ \"; for (auto& it : p) os << it << \" \"; return os << \"]\";}",
    "#else",
    "#define pr(...){}",
    "#define debarr(a,n){}",
    "#define debmat(mat,row,col){}",
    "#define debvec(vec){}",
    "#endif"
  ],
  "description": ""
}
}