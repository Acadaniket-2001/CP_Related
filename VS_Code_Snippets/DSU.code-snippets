
{
	"": {
		"prefix": "DSU",
		"body": [
		  "struct Dsu {",
		  "    // n-> #nodes, set_size-> #components",
		  "    // rank[i]: stores the size of each component with i as root",
		  "    // parent[i]: stores the parent of each node",
		  "    int n, set_size, *parent, *rank;",
		  "    Dsu() {}",
		  "    Dsu(int a) {",
		  "        n = set_size = a;",
		  "        parent = new int[n + 1];",
		  "        rank = new int[n + 1];",
		  "        for(int i = 1; i <= n; ++i) { parent[i] = i, rank[i] = 1; }",
		  "    }",
		  "    ",
		  "    //Don't directly use parent[node] to get parent of node instead use find(i), as it may lead to some error",
		  "    int find(int x) {",
		  "        if(parent[x] == x)  return x;",
		  "        else return parent[x] = find(parent[x]);       // path compression",
		  "    }",
		  "    void merge(int x ,int y) {",
		  "        int xroot = find(x), yroot = find(y);",
		  "        if(xroot != yroot) {",
		  "            if(rank[xroot] >= rank[yroot]) {           // rank compression",
		  "                parent[yroot] = xroot;",
		  "                rank[xroot] += rank[yroot];",
		  "            }",
		  "            else {",
		  "                parent[xroot] = yroot;",
		  "                rank[yroot] += rank[xroot];",
		  "            }",
		  "            set_size -= 1;",
		  "        }",
		  "    }",
		  "    void reset() {",
		  "        set_size = n;",
		  "        for(int i = 1; i <= n; ++i) {",
		  "            parent[i] = i;",
		  "            rank[i] = 1;",
		  "        }",
		  "    }",
		  "    int size() {",
		  "        return set_size;",
		  "    }",
		  "    void print() {",
		  "        for(int i = 1; i <= n; ++i) {",
		  "            cout << i << \" -> \" << parent[i] << endl;",
		  "        }",
		  "    }",
		  "};",
		  ""
		],
		"description": ""
	  }
}